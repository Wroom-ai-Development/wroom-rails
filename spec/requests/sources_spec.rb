# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/sources', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Source. As you add validations to Source, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:valid_attributes) do
    { name: 'Source name',
      user_id: user.id,
      file: ActiveStorage::Blob.create_and_upload!(
        io: File.open(Rails.root.join('spec/factories/files/file.pdf'), 'rb'),
        filename: 'file.pdf',
        content_type: 'application/pdf'
      ).signed_id }
  end

  let(:invalid_attributes) do
    {
      name: '',
      user_id: ''
    }
  end

  before do
    sign_in(user)
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_source_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      source = Source.create! valid_attributes
      get edit_source_url(source)
      expect(response).to be_successful
    end
  end

  xdescribe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Source' do
        expect do
          post sources_url, params: { source: valid_attributes }
        end.to change(Source, :count).by(1)
      end

      it 'redirects to the created source' do
        post sources_url, params: { source: valid_attributes }
        expect(response).to redirect_to(source_url(Source.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Source' do
        expect do
          post sources_url, params: { source: invalid_attributes }
        end.to change(Source, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post sources_url, params: { source: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: 'New doc',
          user_id: user.id
        }
      end

      it 'updates the requested source' do
        source = Source.create! valid_attributes
        patch source_url(source), params: { source: new_attributes }
        source.reload
        expect(source.title).to eq('New doc')
      end

      it 'redirects to the source' do
        source = Source.create! valid_attributes
        patch source_url(source), params: { source: new_attributes }
        source.reload
        expect(response).to redirect_to(source_url(source))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        source = Source.create! valid_attributes
        patch source_url(source), params: { source: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested source' do
      source = Source.create! valid_attributes
      expect do
        delete source_url(source)
      end.to change(Source, :count).by(-1)
    end

    it 'redirects to the sources list' do
      source = Source.create! valid_attributes
      delete source_url(source)
      expect(response).to redirect_to(sources_url)
    end
  end
end
